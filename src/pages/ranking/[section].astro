---
import dayjs from "dayjs";
import content from "@/content.json";
import SeasonList, {
  dateToSection,
  displaySectionName,
  getSectionArray,
  sectionToSlug,
  type Section,
} from "@/components/SeasonList.astro";
import Base from "@/layouts/Base.astro";
import RankChart from "@/components/RankChart.svelte";

export function getStaticPaths() {
  return getSectionArray(false).map((section) => ({
    params: {
      section: sectionToSlug(section),
    },
    props: {
      section,
    },
  }));
}

type Props = {
  section: Section;
};
const { section } = Astro.props;

const articles = content.articles
  .sort((a, b) => dayjs(a.date).unix() - dayjs(b.date).unix())
  .map((article, index) => ({
    index: index + 1,
    published: dayjs(article.date) <= dayjs() && article.url !== null,
    shortDate: dayjs(article.date).format("M/D"),
    runnerPath: article.githubUser
      ? `/ekiden/runners/${article.githubUser}`
      : undefined,
    ...article,
  }))
  .filter((article) => {
    const articleSection = dateToSection(dayjs(article.date));
    return (
      articleSection.fiscalYear == section.fiscalYear &&
      articleSection.season == section.season &&
      article.published
    );
  });
---

<Base
  title={`Vim 駅伝 - ランキング - ${displaySectionName(section)}`}
  slug={`/ranking/`}
>
  <SeasonList
    selected={section}
    linkDest="ranking"
    showUnpublishedSeason={false}
  />
  <section class="py-4">
    <h2>記事投稿数ランキング（{displaySectionName(section)}）</h2>
    <RankChart articles={articles} client:only="svelte" />
  </section>
</Base>
